generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  SshCredential SshCredential[]

  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  SelfHostItems        SelfHostItems[]
  SelfHostLinkCategory SelfHostLinkCategory[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model SshCredential {
  id       String  @id @default(cuid())
  User     User?   @relation(fields: [userId], references: [id])
  userId   String?
  name     String // Add this line for a display name
  username String
  password String
  host     String
  port     Int

  @@unique([userId, name]) // Optional: ensure unique name per user
}

model SelfHostLinkCategory {
  id       String          @id @default(cuid())
  User     User            @relation(fields: [userId], references: [id])
  userId   String
  name     String // Add this line for a display name
  iconPath String
  Items    SelfHostItems[]

  @@unique([userId, name]) // Optional: ensure unique name per user
}

model SelfHostItems {
  id                     String                @id @default(cuid())
  User                   User                  @relation(fields: [userId], references: [id])
  userId                 String
  name                   String // Add this line for a display name
  url                    String
  iconPath               String
  SelfHostLinkCategory   SelfHostLinkCategory? @relation(fields: [selfHostLinkCategoryId], references: [id])
  selfHostLinkCategoryId String? // Make this field optional

  @@unique([userId, name]) // Optional: ensure unique name per user
}
